import 'package:aiso/Dashboards/view_models/dash_view_model.dart';
// import 'package:aiso/Dashboards/widgets/bar_chart_string_double.dart';
import 'package:aiso/Dashboards/widgets/start_card.dart';
import 'package:aiso/NavBar/widgets/markdown_viewer.dart';
import 'package:aiso/Widgets/row_col.dart';
import 'package:aiso/constants/app_colors.dart';
import 'package:aiso/models/location_models.dart';
import 'package:aiso/models/prompt_model.dart';
import 'package:aiso/reports/models/report_run_model.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';
import 'package:responsive_builder/responsive_builder.dart';
import 'package:syncfusion_flutter_charts/charts.dart';

final String percentFoundText = '''# % Found
This metric is the proportion of searches where your business appears in the result generated by the AI tool.

**The goal is to appear in the results for at least 80% of searches**.
''';

final String meanRankText = '''# Average Rank
This metric is the average rank of your business in the results generated by the AI tool, when you do appear in the results.

**The goal is to be ranked in the top 3**.
''';

class Dash00RowCol extends StatelessWidget {
  final DeviceScreenType deviceType;

  const Dash00RowCol({super.key, required this.deviceType});

  @override
  Widget build(BuildContext context) {
    final vm = context.watch<DashViewModel>();

    final RowColType layoutType =
        deviceType == DeviceScreenType.desktop
            ? RowColType.row
            : RowColType.column;

    // final List<Map<String, dynamic>> percentFoundData = [
    //   {'model': 'ChatGPT', 'score': 0.8, 'color': Colors.blue},
    //   {'model': 'Gemini', 'score': 0.66, 'color': Colors.deepPurple},
    // ];

    // final List<Map<String, dynamic>> percentFoundLocationData = [
    //   {'model': 'Frankston', 'score': 0.8, 'color': Colors.blue},
    //   {'model': 'Mount Eliza', 'score': 0.66, 'color': Colors.deepPurple},
    //   {'model': 'Mornington', 'score': 0.25, 'color': Colors.deepPurple},
    // ];

    final List<Map<String, dynamic>> percentFoundData = vm.percentFoundLLMData;
    final List<Map<String, dynamic>> percentFoundLocationData = vm.percentFoundLocationData;

    // final List<Map<String, dynamic>> meanRankData = [
    //   {'model': 'ChatGPT', 'score': 2.7, 'color': Colors.blue},
    //   {'model': 'Gemini', 'score': 4.3, 'color': Colors.deepPurple},
    // ];

    // final List<Map<String, dynamic>> meanRankLocation = [
    //   {'model': 'Frankston', 'score': 1.5, 'color': Colors.blue},
    //   {'model': 'Mount Eliza', 'score': 4.3, 'color': Colors.deepPurple},
    //   {'model': 'Mornington', 'score': 8.0, 'color': Colors.deepPurple},
    // ];

    final List<Map<String, dynamic>> meanRankData =vm.meanRankLLMData;
    final List<Map<String, dynamic>> meanRankLocation = vm.meanRankLocationData;

    if (vm.isLoading) {
      return const Center(
        child: Padding(
          padding: EdgeInsets.all(32),
          child: CircularProgressIndicator(),
        ),
      );
    }

    return Column(
      children: [

        SizedBox(height: 4),

        RowCol(
          layoutType: layoutType,
          spacing: 16.0,
          flexes: [1,1,1],
          children: [

            // DropdownButtonFormField<ReportRun>(
            //   isExpanded: true,
            //   value: vm.selectedReportRun,
            //   decoration: const InputDecoration(
            //     labelText: 'Report Date',
            //     border: OutlineInputBorder(),
            //   ),
            //   items: [
            //     DropdownMenuItem<ReportRun>(value: null, child: Text('All')),
            
            //     ...vm.reportRuns.map((run) {
            //       return DropdownMenuItem<ReportRun>(
            //         value: run,
            //         child: Text(
            //           DateFormat(
            //             'd MMMM y',
            //           ).format(run.dbTimestamps.createdAt),
            //           overflow: TextOverflow.ellipsis,
            //         ),
            //       );
            //     }),
            //   ],
            //   onChanged: (value) {
            //     vm.selectedReportRun = value;
            //   },
            // ),

            // DropdownButtonFormField<Prompt>(
            //   isExpanded: true,
            //   value: vm.selectedPrompt,
            //   decoration: const InputDecoration(
            //     labelText: 'Prompts',
            //     border: OutlineInputBorder(),
            //   ),
            //   items: [
            //     DropdownMenuItem<Prompt>(value: null, child: Text('All')),
            
            //     ...vm.prompts.map((p) {
            //       return DropdownMenuItem<Prompt>(
            //         value: p,
            //         child: Text(p.prompt, overflow: TextOverflow.ellipsis),
            //       );
            //     }),
            //   ],
            
            //   onChanged: (value) {
            //     vm.selectedPrompt = value;
            //   },
            // ),

            DropdownButtonFormField<Locality>(
              isExpanded: true,
              value: vm.selectedLocation,
              decoration: const InputDecoration(
                labelText: 'Locations',
                border: OutlineInputBorder(),
              ),
              items: [
                DropdownMenuItem<Locality>(value: null, child: Text('All')),
            
                ...vm.locations.map((l) {
                  return DropdownMenuItem<Locality>(
                    value: l,
                    child: Text(l.name, overflow: TextOverflow.ellipsis),
                  );
                }),
              ],
            
              onChanged: (value) {
                vm.selectedLocation = value;
              },
            ),
          ],
        ),

        SizedBox(height: 8.0),

        SizedBox(height: 8.0),

        SizedBox(height: 32.0),

        RowCol(
          layoutType: layoutType,
          spacing: 16.0,
          flexes: [2, 1],
          colMainAxisAlignment: MainAxisAlignment.center,
          colCrossAxisAlignment: CrossAxisAlignment.center,
          children: [
            MarkdownContent(
              markdownText: percentFoundText,
              deviceType: deviceType,
            ),

            ConstrainedBox(
              constraints: BoxConstraints(
                // minWidth: 150,
                minHeight: 150,
                // maxWidth: 150,
                maxHeight: 150,
              ),
              child: SizedBox.expand(
                child: StatCard(heading: '% Found', value: vm.formattedPercentFound),
              ),
            ),

            // Text('% Found'),

            // BarChartStringDouble(
            //   chartTitle: '% Found',
            //   yAxisTitle: '%',
            //   yAxisNumberFormat: NumberFormat.percentPattern()
            //   ),

            // SfCartesianChart(
            //   title: ChartTitle(text: '% Found'),
            //   primaryXAxis: CategoryAxis(),
            //   primaryYAxis: NumericAxis(
            //     minimum: 0,
            //     maximum: 1,
            //     numberFormat: NumberFormat.percentPattern(),
            //     interval: 0.2,
            //     title: AxisTitle(text: '%'),
            //     plotBands: <PlotBand>[
            //     PlotBand(
            //       isVisible: true,
            //       start: 0.80, // your goal threshold
            //       end: 0.80,   // same as start for a line
            //       borderColor: AppColors.color3,
            //       borderWidth: 2,
            //       dashArray: [10,10], // optional dashed line
            //       text: 'Goal',
            //       textStyle: const TextStyle(
            //         color: AppColors.color3,
            //         fontWeight: FontWeight.bold,
            //       ),
            //       horizontalTextAlignment: TextAnchor.end,
            //       verticalTextAlignment: TextAnchor.start,
            //     ),
            //   ],
            //   ),
            //   series: <CartesianSeries>[
            //     ColumnSeries<Map<String, dynamic>, String>(
            //       dataSource: percentFoundData,
            //       xValueMapper: (Map<String, dynamic> datum, _) => datum['model'] as String,
            //       yValueMapper: (Map<String, dynamic> datum, _) => datum['score'] as double,
            //       pointColorMapper: (datum, _) => datum['color'] as Color,
            //       dataLabelSettings: const DataLabelSettings(isVisible: true),
            //       enableTooltip: true,
            //       name: 'Score',
            //     ),
            //   ],
            // ),
          ],
        ),

        SizedBox(height: 24),

        RowCol(
          layoutType: layoutType,
          spacing: 16.0,
          colMainAxisAlignment: MainAxisAlignment.center,
          colCrossAxisAlignment: CrossAxisAlignment.center,
          children: [
            SfCartesianChart(
              title: ChartTitle(text: '% Found by AI'),
              primaryXAxis: CategoryAxis(),
              primaryYAxis: NumericAxis(
                minimum: 0,
                maximum: 1,
                numberFormat: NumberFormat.percentPattern(),
                interval: 0.2,
                title: AxisTitle(text: '%'),
                plotBands: <PlotBand>[
                  PlotBand(
                    isVisible: true,
                    start: 0.80, // your goal threshold
                    end: 0.80, // same as start for a line
                    borderColor: AppColors.color3,
                    borderWidth: 2,
                    dashArray: [10, 10], // optional dashed line
                    text: 'Goal',
                    textStyle: const TextStyle(
                      color: AppColors.color3,
                      fontWeight: FontWeight.bold,
                    ),
                    horizontalTextAlignment: TextAnchor.end,
                    verticalTextAlignment: TextAnchor.start,
                  ),
                ],
              ),
              series: <CartesianSeries>[
                ColumnSeries<Map<String, dynamic>, String>(
                  dataSource: percentFoundData,
                  xValueMapper:
                      (Map<String, dynamic> datum, _) =>
                          datum['label'] as String,
                  yValueMapper:
                      (Map<String, dynamic> datum, _) =>
                          datum['value'] as double,
                  pointColorMapper: (datum, _) => datum['color'] as Color,
                  dataLabelSettings: const DataLabelSettings(isVisible: true),
                  enableTooltip: true,
                  name: 'Score',
                ),
              ],
            ),

            SfCartesianChart(
              title: ChartTitle(text: '% Found by Location'),
              primaryXAxis: CategoryAxis(),
              primaryYAxis: NumericAxis(
                minimum: 0,
                maximum: 1,
                numberFormat: NumberFormat.percentPattern(),
                interval: 0.2,
                title: AxisTitle(text: '%'),
                plotBands: <PlotBand>[
                  PlotBand(
                    isVisible: true,
                    start: 0.80, // your goal threshold
                    end: 0.80, // same as start for a line
                    borderColor: AppColors.color3,
                    borderWidth: 2,
                    dashArray: [10, 10], // optional dashed line
                    text: 'Goal',
                    textStyle: const TextStyle(
                      color: AppColors.color3,
                      fontWeight: FontWeight.bold,
                    ),
                    horizontalTextAlignment: TextAnchor.end,
                    verticalTextAlignment: TextAnchor.start,
                  ),
                ],
              ),
              series: <CartesianSeries>[
                ColumnSeries<Map<String, dynamic>, String>(
                  dataSource: percentFoundLocationData,
                  xValueMapper:
                      (Map<String, dynamic> datum, _) =>
                          datum['label'] as String,
                  yValueMapper:
                      (Map<String, dynamic> datum, _) =>
                          datum['value'] as double,
                  pointColorMapper: (datum, _) => datum['color'] as Color,
                  dataLabelSettings: const DataLabelSettings(isVisible: true),
                  enableTooltip: true,
                  name: 'Score',
                ),
              ],
            ),
          ],
        ),

        SizedBox(height: 80),

        RowCol(
          layoutType: layoutType,
          spacing: 16.0,
          flexes: [2, 1],
          colMainAxisAlignment: MainAxisAlignment.center,
          colCrossAxisAlignment: CrossAxisAlignment.center,
          children: [
            MarkdownContent(markdownText: meanRankText, deviceType: deviceType),

            // Text('Average Rank'),
            ConstrainedBox(
              constraints: BoxConstraints(
                // minWidth: 300,
                minHeight: 150,
                // maxWidth: 300,
                maxHeight: 150,
              ),
              child: StatCard(heading: 'Average Rank', value: vm.formattedMeanRank),
            ),

            // BarChartStringDouble(
            //   chartTitle: 'Average Rank',
            //   yAxisTitle: 'Rank',
            //   yAxisNumberFormat: NumberFormat('0.0')
            //   ),
          ],
        ),

        SizedBox(height: 24),

        RowCol(
          layoutType: layoutType,
          spacing: 16.0,
          colMainAxisAlignment: MainAxisAlignment.center,
          colCrossAxisAlignment: CrossAxisAlignment.center,
          children: [
            SfCartesianChart(
              title: ChartTitle(text: 'Average Rank by AI'),
              primaryXAxis: CategoryAxis(),
              primaryYAxis: NumericAxis(
                minimum: 0,
                maximum: 10,
                numberFormat: NumberFormat(
                  '0.0',
                ), // NumberFormat.percentPattern(),
                interval: 2,
                title: AxisTitle(text: 'Rank'),
                plotBands: <PlotBand>[
                  PlotBand(
                    isVisible: true,
                    start: 3.0, // your goal threshold
                    end: 3.0, // same as start for a line
                    borderColor: AppColors.color3,
                    borderWidth: 2,
                    dashArray: [10, 10], // optional dashed line
                    text: 'Goal',
                    textStyle: const TextStyle(
                      color: AppColors.color3,
                      fontWeight: FontWeight.bold,
                    ),
                    horizontalTextAlignment: TextAnchor.end,
                    verticalTextAlignment: TextAnchor.start,
                  ),
                ],
              ),
              series: <CartesianSeries>[
                ColumnSeries<Map<String, dynamic>, String>(
                  dataSource: meanRankData,
                  xValueMapper:
                      (Map<String, dynamic> datum, _) =>
                          datum['label'] as String,
                  yValueMapper:
                      (Map<String, dynamic> datum, _) =>
                          datum['value'] as double,
                  pointColorMapper: (datum, _) => datum['color'] as Color,
                  dataLabelSettings: const DataLabelSettings(isVisible: true),
                  enableTooltip: true,
                  name: 'Score',
                ),
              ],
            ),

            SfCartesianChart(
              title: ChartTitle(text: 'Average Rank by Location'),
              primaryXAxis: CategoryAxis(),
              primaryYAxis: NumericAxis(
                minimum: 0,
                maximum: 10,
                numberFormat: NumberFormat(
                  '0.0',
                ), // NumberFormat.percentPattern(),
                interval: 2,
                title: AxisTitle(text: 'Rank'),
                plotBands: <PlotBand>[
                  PlotBand(
                    isVisible: true,
                    start: 3.0, // your goal threshold
                    end: 3.0, // same as start for a line
                    borderColor: AppColors.color3,
                    borderWidth: 2,
                    dashArray: [10, 10], // optional dashed line
                    text: 'Goal',
                    textStyle: const TextStyle(
                      color: AppColors.color3,
                      fontWeight: FontWeight.bold,
                    ),
                    horizontalTextAlignment: TextAnchor.end,
                    verticalTextAlignment: TextAnchor.start,
                  ),
                ],
              ),
              series: <CartesianSeries>[
                ColumnSeries<Map<String, dynamic>, String>(
                  dataSource: meanRankLocation,
                  xValueMapper:
                      (Map<String, dynamic> datum, _) =>
                          datum['label'] as String,
                  yValueMapper:
                      (Map<String, dynamic> datum, _) =>
                          datum['value'] as double,
                  pointColorMapper: (datum, _) => datum['color'] as Color,
                  dataLabelSettings: const DataLabelSettings(isVisible: true),
                  enableTooltip: true,
                  name: 'Score',
                ),
              ],
            ),
          ],
        ),
      ],
    );
  }
}
