import 'package:aiso/constants/string_constants.dart';
import 'package:aiso/models/cadence_enum.dart';
import 'package:aiso/models/db_timestamps_model.dart';
import 'package:aiso/models/entity_model.dart';
import 'package:aiso/models/industry_model.dart';
import 'package:aiso/models/location_models.dart';
import 'package:aiso/models/search_target_model.dart';
import 'package:aiso/reports/models/report_model.dart';
import 'package:aiso/reports/view_models/free_report_view_model.dart';
import 'package:aiso/reports/views/example_timeline_screen.dart';
import 'package:aiso/reports/views/locality_type_ahead.dart';
import 'package:aiso/view_models/auth_view_model.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class FreeReportFormScreen extends StatefulWidget {
  const FreeReportFormScreen({super.key});

  @override
  State<FreeReportFormScreen> createState() => _FreeReportFormScreenState();
}

class _FreeReportFormScreenState extends State<FreeReportFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final _scrollController = ScrollController();

  // Country and state maps
  // final Map<String, String> countriesMap = {
  //   'Australia': 'AUS',
  //   // 'New Zealand': 'NZL',
  //   // 'United States': 'USA',
  // };

  // final Map<String, String> australianStatesMap = {
  //   'Victoria': 'VIC',
  //   'New South Wales': 'NSW',
  //   'Queensland': 'QLD',
  //   'Western Australia': 'WA',
  //   'South Australia': 'SA',
  //   'Tasmania': 'TAS',
  //   'Northern Territory': 'NT',
  //   'Australian Capital Territory': 'ACT',
  // };

  // Form state
  // String firstName = '';
  // String lastName = '';
  String email = '';
  // String? countryIso = 'AUS'; // stored ISO value
  // String? stateCode;  // stored short code
  String localityName = '';
  String entityName = '';

  // bool get isFormValid {
  //   return true &&
  //       // firstName.isNotEmpty &&
  //       // lastName.isNotEmpty &&
  //       email.isNotEmpty &&
  //       countryIso != null &&
  //       (countryIso != 'AUS' || stateCode != null) &&
  //       localityName.isNotEmpty &&
  //       entityName.isNotEmpty;
  // }

  void _updateField(String value, void Function(String) updateFn) {
    setState(() {
      updateFn(value);
    });
  }

  void _createAndRunFreeReport() async {

    // final freeReportVM = Provider.of<FreeReportViewModel>(context, listen: false);
    // final authViewModel = Provider.of<AuthViewModel>(context, listen: false);
    // final currentUserId = authViewModel.currentUser?.id ?? '';

    // // final Locality? freeLocality = await freeReportVM.fetchLocality('$countryIso-$stateCode', localityName);
    // // if (freeLocality==null) return;
    // // final String freePrompt = await freeReportVM.processFreePrompt(industry: 'Real Estate', locality: freeLocality);

    // final String freePrompt = 'Top 10 real estate agencies in ${freeLocality.name}, ${freeLocality.regionCode} ${freeLocality.countryName}';

    // final SearchTarget searchTarget = SearchTarget(
    //   id: '', 
    //   reportId: '', 
    //   name: entityName, 
    //   type: EntityType.business, 
    //   industry: Industry(id: '', name: ''),
    //   description: 'A real estate agency.', 
    //   dbTimestamps: DbTimestamps.now()
    //   );

    // final Report freeReport = Report(
    //   id: '', // generated by supabase
    //   userId: currentUserId,
    //   title: 'Free report!'.trim(),
    //   isPaid: false,
    //   cadence: Cadence.month,
    //   dbTimestamps: DbTimestamps.now(),
    // );

    // await freeReportVM.createAndRunFreeReport(freeReport, searchTarget, freePrompt, freeLocality);

  }

  @override
  Widget build(BuildContext context) {

    final vm = Provider.of<FreeReportViewModel>(context);

    return Scaffold(
      appBar: AppBar(title: Text("Generate Free Report!")),
      body: Stack(
        children: [
          Padding(
            padding: const EdgeInsets.only(bottom: 80.0),
            child: SingleChildScrollView(
              controller: _scrollController,
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Center(
                      child: Image.asset(
                        logoImage,
                        height: 100,
                      ),
                    ),
                    const SizedBox(height: 20),
                    // _buildTextField("First Name", (val) => _updateField(val, (v) => firstName = v)),
                    // _buildTextField("Last Name", (val) => _updateField(val, (v) => lastName = v)),
                    _buildTextField("Email", (val) => _updateField(val, (v) => email = v), keyboardType: TextInputType.emailAddress),

                    _buildDropdownField<Industry>(
                      label: 'Industry',
                      value: vm.selectedIndustry,
                      items: vm.industries.map((i) => DropdownMenuItem(
                        value: i,
                        child: Text(i.name),
                      )).toList(),
                      onChanged: (i) => vm.selectedIndustry = i,
                    ),

                    _buildTextField("Business Name", (val) => _updateField(val, (v) => entityName = v)),

                    _buildDropdownField<Country>(
                      label: 'Country',
                      value: vm.selectedCountry,
                      items: vm.countries.map((c) => DropdownMenuItem(
                        value: c,
                        child: Text(c.name),
                      )).toList(),
                      onChanged: (c) => vm.selectedCountry = c,
                    ),

                    _buildDropdownField<Region>(
                      label: 'State',
                      value: vm.selectedRegion,
                      items: (vm.selectedCountry?.regions ?? []).map((r) => DropdownMenuItem(
                        value: r,
                        child: Text(r.name),
                      )).toList(),
                      onChanged: (r) => vm.selectedRegion = r,
                    ),

                    LocalityField(),
                    
                    // _buildTextField("Suburb", (val) => _updateField(val, (v) => localityName = v)),
                    
                    const SizedBox(height: 20),
                  ],
                ),
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: SafeArea(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: ElevatedButton(
                  onPressed: () {
                    // Validate all fields in the Form
                    if (_formKey.currentState!.validate()) {
                      _createAndRunFreeReport();
                      // navigate to ExampleTimelineScreen
                      Navigator.of(context).push(
                        MaterialPageRoute(
                          builder: (_) => ExampleTimelineScreen(),
                        ),
                      );
                    }
                  },
                  style: ElevatedButton.styleFrom(
                    minimumSize: Size(double.infinity, 50),
                  ),
                  child: Text("Generate free report!"),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTextField(String label, Function(String) onChanged,
      {TextInputType keyboardType = TextInputType.text}) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12.0),
      child: TextFormField(
        keyboardType: keyboardType,
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(),
        ),
        onChanged: onChanged,
        validator: (value) {
          if (value == null || value.isEmpty) {
            return 'Required';
          }
          return null;
        },
      ),
    );
  }

  Widget _buildDropdownField<T>({
    required String label,
    required T? value,
    required List<DropdownMenuItem<T>> items,
    required ValueChanged<T?> onChanged,
  }) {
    return DropdownButtonFormField<T>(
      decoration: InputDecoration(labelText: label, border: OutlineInputBorder()),
      value: value,
      items: items,
      onChanged: onChanged,
      validator: (val) => val == null ? 'Required' : null,
    );
  }

}
